/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthConfig } from '../models';
// @ts-ignore
import { OAuthParametersV2 } from '../models';
/**
 * AdminAuthenticationV2Api - axios parameter creator
 * @export
 */
export const AdminAuthenticationV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {OAuthParametersV2} oAuthParametersV2 Specifies the oauth provider specific configuration.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOAuthConfig1: async (oAuthParametersV2: OAuthParametersV2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuthParametersV2' is not null or undefined
            assertParamExists('createOAuthConfig1', 'oAuthParametersV2', oAuthParametersV2)
            const localVarPath = `/iam/v2/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthParametersV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminAuthenticationV2Api - functional programming interface
 * @export
 */
export const AdminAuthenticationV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminAuthenticationV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {OAuthParametersV2} oAuthParametersV2 Specifies the oauth provider specific configuration.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async createOAuthConfig1(oAuthParametersV2: OAuthParametersV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOAuthConfig1(oAuthParametersV2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminAuthenticationV2Api - factory interface
 * @export
 */
export const AdminAuthenticationV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminAuthenticationV2ApiFp(configuration)
    return {
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AdminAuthenticationV2ApiCreateOAuthConfig1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOAuthConfig1(requestParameters: AdminAuthenticationV2ApiCreateOAuthConfig1Request, options?: AxiosRequestConfig): AxiosPromise<AuthConfig> {
            return localVarFp.createOAuthConfig1(requestParameters.oAuthParametersV2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOAuthConfig1 operation in AdminAuthenticationV2Api.
 * @export
 * @interface AdminAuthenticationV2ApiCreateOAuthConfig1Request
 */
export interface AdminAuthenticationV2ApiCreateOAuthConfig1Request {
    /**
     * Specifies the oauth provider specific configuration.
     * @type {OAuthParametersV2}
     * @memberof AdminAuthenticationV2ApiCreateOAuthConfig1
     */
    readonly oAuthParametersV2: OAuthParametersV2
}

/**
 * AdminAuthenticationV2Api - object-oriented interface
 * @export
 * @class AdminAuthenticationV2Api
 * @extends {BaseAPI}
 */
export class AdminAuthenticationV2Api extends BaseAPI {
    /**
     * The endpoint creates oauth configuration for the current project environment.
     * @summary Create oauth configuration.
     * @param {AdminAuthenticationV2ApiCreateOAuthConfig1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminAuthenticationV2Api
     */
    public createOAuthConfig1(requestParameters: AdminAuthenticationV2ApiCreateOAuthConfig1Request, options?: AxiosRequestConfig) {
        return AdminAuthenticationV2ApiFp(this.configuration).createOAuthConfig1(requestParameters.oAuthParametersV2, options).then((request) => request(this.axios, this.basePath));
    }
}

