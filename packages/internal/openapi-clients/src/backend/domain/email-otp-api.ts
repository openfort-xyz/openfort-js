/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmailOtpCheckVerificationOtpPostRequest } from '../models';
// @ts-ignore
import { EmailOtpResetPasswordPostRequest } from '../models';
// @ts-ignore
import { EmailOtpSendVerificationOtpPostRequest } from '../models';
// @ts-ignore
import { EmailOtpVerifyEmailPost200Response } from '../models';
// @ts-ignore
import { EmailOtpVerifyEmailPostRequest } from '../models';
// @ts-ignore
import { ForgetPasswordEmailOtpPost200Response } from '../models';
// @ts-ignore
import { ForgetPasswordEmailOtpPostRequest } from '../models';
// @ts-ignore
import { SignInEmailOtpPost200Response } from '../models';
// @ts-ignore
import { SignInEmailOtpPostRequest } from '../models';
// @ts-ignore
import { SignOutPost200Response } from '../models';
// @ts-ignore
import { SocialSignIn400Response } from '../models';
// @ts-ignore
import { SocialSignIn403Response } from '../models';
/**
 * EmailOtpApi - axios parameter creator
 * @export
 */
export const EmailOtpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if a verification OTP is valid
         * @param {EmailOtpCheckVerificationOtpPostRequest} emailOtpCheckVerificationOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpCheckVerificationOtpPost: async (emailOtpCheckVerificationOtpPostRequest: EmailOtpCheckVerificationOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailOtpCheckVerificationOtpPostRequest' is not null or undefined
            assertParamExists('emailOtpCheckVerificationOtpPost', 'emailOtpCheckVerificationOtpPostRequest', emailOtpCheckVerificationOtpPostRequest)
            const localVarPath = `/email-otp/check-verification-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailOtpCheckVerificationOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset user password with OTP
         * @param {EmailOtpResetPasswordPostRequest} emailOtpResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpResetPasswordPost: async (emailOtpResetPasswordPostRequest: EmailOtpResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailOtpResetPasswordPostRequest' is not null or undefined
            assertParamExists('emailOtpResetPasswordPost', 'emailOtpResetPasswordPostRequest', emailOtpResetPasswordPostRequest)
            const localVarPath = `/email-otp/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailOtpResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send verification OTP
         * @param {EmailOtpSendVerificationOtpPostRequest} emailOtpSendVerificationOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpSendVerificationOtpPost: async (emailOtpSendVerificationOtpPostRequest: EmailOtpSendVerificationOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailOtpSendVerificationOtpPostRequest' is not null or undefined
            assertParamExists('emailOtpSendVerificationOtpPost', 'emailOtpSendVerificationOtpPostRequest', emailOtpSendVerificationOtpPostRequest)
            const localVarPath = `/email-otp/send-verification-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailOtpSendVerificationOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify email with OTP
         * @param {EmailOtpVerifyEmailPostRequest} emailOtpVerifyEmailPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpVerifyEmailPost: async (emailOtpVerifyEmailPostRequest: EmailOtpVerifyEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailOtpVerifyEmailPostRequest' is not null or undefined
            assertParamExists('emailOtpVerifyEmailPost', 'emailOtpVerifyEmailPostRequest', emailOtpVerifyEmailPostRequest)
            const localVarPath = `/email-otp/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailOtpVerifyEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a password reset OTP to the user
         * @param {ForgetPasswordEmailOtpPostRequest} forgetPasswordEmailOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgetPasswordEmailOtpPost: async (forgetPasswordEmailOtpPostRequest: ForgetPasswordEmailOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgetPasswordEmailOtpPostRequest' is not null or undefined
            assertParamExists('forgetPasswordEmailOtpPost', 'forgetPasswordEmailOtpPostRequest', forgetPasswordEmailOtpPostRequest)
            const localVarPath = `/forget-password/email-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgetPasswordEmailOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign in with OTP
         * @param {SignInEmailOtpPostRequest} signInEmailOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInEmailOtpPost: async (signInEmailOtpPostRequest: SignInEmailOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInEmailOtpPostRequest' is not null or undefined
            assertParamExists('signInEmailOtpPost', 'signInEmailOtpPostRequest', signInEmailOtpPostRequest)
            const localVarPath = `/sign-in/email-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInEmailOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailOtpApi - functional programming interface
 * @export
 */
export const EmailOtpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailOtpApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if a verification OTP is valid
         * @param {EmailOtpCheckVerificationOtpPostRequest} emailOtpCheckVerificationOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailOtpCheckVerificationOtpPost(emailOtpCheckVerificationOtpPostRequest: EmailOtpCheckVerificationOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignOutPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailOtpCheckVerificationOtpPost(emailOtpCheckVerificationOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reset user password with OTP
         * @param {EmailOtpResetPasswordPostRequest} emailOtpResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailOtpResetPasswordPost(emailOtpResetPasswordPostRequest: EmailOtpResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailOtpResetPasswordPost(emailOtpResetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send verification OTP
         * @param {EmailOtpSendVerificationOtpPostRequest} emailOtpSendVerificationOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailOtpSendVerificationOtpPost(emailOtpSendVerificationOtpPostRequest: EmailOtpSendVerificationOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignOutPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailOtpSendVerificationOtpPost(emailOtpSendVerificationOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify email with OTP
         * @param {EmailOtpVerifyEmailPostRequest} emailOtpVerifyEmailPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailOtpVerifyEmailPost(emailOtpVerifyEmailPostRequest: EmailOtpVerifyEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailOtpVerifyEmailPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailOtpVerifyEmailPost(emailOtpVerifyEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a password reset OTP to the user
         * @param {ForgetPasswordEmailOtpPostRequest} forgetPasswordEmailOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgetPasswordEmailOtpPost(forgetPasswordEmailOtpPostRequest: ForgetPasswordEmailOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForgetPasswordEmailOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgetPasswordEmailOtpPost(forgetPasswordEmailOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sign in with OTP
         * @param {SignInEmailOtpPostRequest} signInEmailOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInEmailOtpPost(signInEmailOtpPostRequest: SignInEmailOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInEmailOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInEmailOtpPost(signInEmailOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailOtpApi - factory interface
 * @export
 */
export const EmailOtpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailOtpApiFp(configuration)
    return {
        /**
         * Check if a verification OTP is valid
         * @param {EmailOtpApiEmailOtpCheckVerificationOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpCheckVerificationOtpPost(requestParameters: EmailOtpApiEmailOtpCheckVerificationOtpPostRequest, options?: AxiosRequestConfig): AxiosPromise<SignOutPost200Response> {
            return localVarFp.emailOtpCheckVerificationOtpPost(requestParameters.emailOtpCheckVerificationOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset user password with OTP
         * @param {EmailOtpApiEmailOtpResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpResetPasswordPost(requestParameters: EmailOtpApiEmailOtpResetPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.emailOtpResetPasswordPost(requestParameters.emailOtpResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Send verification OTP
         * @param {EmailOtpApiEmailOtpSendVerificationOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpSendVerificationOtpPost(requestParameters: EmailOtpApiEmailOtpSendVerificationOtpPostRequest, options?: AxiosRequestConfig): AxiosPromise<SignOutPost200Response> {
            return localVarFp.emailOtpSendVerificationOtpPost(requestParameters.emailOtpSendVerificationOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify email with OTP
         * @param {EmailOtpApiEmailOtpVerifyEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailOtpVerifyEmailPost(requestParameters: EmailOtpApiEmailOtpVerifyEmailPostRequest, options?: AxiosRequestConfig): AxiosPromise<EmailOtpVerifyEmailPost200Response> {
            return localVarFp.emailOtpVerifyEmailPost(requestParameters.emailOtpVerifyEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a password reset OTP to the user
         * @param {EmailOtpApiForgetPasswordEmailOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgetPasswordEmailOtpPost(requestParameters: EmailOtpApiForgetPasswordEmailOtpPostRequest, options?: AxiosRequestConfig): AxiosPromise<ForgetPasswordEmailOtpPost200Response> {
            return localVarFp.forgetPasswordEmailOtpPost(requestParameters.forgetPasswordEmailOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign in with OTP
         * @param {EmailOtpApiSignInEmailOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInEmailOtpPost(requestParameters: EmailOtpApiSignInEmailOtpPostRequest, options?: AxiosRequestConfig): AxiosPromise<SignInEmailOtpPost200Response> {
            return localVarFp.signInEmailOtpPost(requestParameters.signInEmailOtpPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for emailOtpCheckVerificationOtpPost operation in EmailOtpApi.
 * @export
 * @interface EmailOtpApiEmailOtpCheckVerificationOtpPostRequest
 */
export interface EmailOtpApiEmailOtpCheckVerificationOtpPostRequest {
    /**
     * 
     * @type {EmailOtpCheckVerificationOtpPostRequest}
     * @memberof EmailOtpApiEmailOtpCheckVerificationOtpPost
     */
    readonly emailOtpCheckVerificationOtpPostRequest: EmailOtpCheckVerificationOtpPostRequest
}

/**
 * Request parameters for emailOtpResetPasswordPost operation in EmailOtpApi.
 * @export
 * @interface EmailOtpApiEmailOtpResetPasswordPostRequest
 */
export interface EmailOtpApiEmailOtpResetPasswordPostRequest {
    /**
     * 
     * @type {EmailOtpResetPasswordPostRequest}
     * @memberof EmailOtpApiEmailOtpResetPasswordPost
     */
    readonly emailOtpResetPasswordPostRequest: EmailOtpResetPasswordPostRequest
}

/**
 * Request parameters for emailOtpSendVerificationOtpPost operation in EmailOtpApi.
 * @export
 * @interface EmailOtpApiEmailOtpSendVerificationOtpPostRequest
 */
export interface EmailOtpApiEmailOtpSendVerificationOtpPostRequest {
    /**
     * 
     * @type {EmailOtpSendVerificationOtpPostRequest}
     * @memberof EmailOtpApiEmailOtpSendVerificationOtpPost
     */
    readonly emailOtpSendVerificationOtpPostRequest: EmailOtpSendVerificationOtpPostRequest
}

/**
 * Request parameters for emailOtpVerifyEmailPost operation in EmailOtpApi.
 * @export
 * @interface EmailOtpApiEmailOtpVerifyEmailPostRequest
 */
export interface EmailOtpApiEmailOtpVerifyEmailPostRequest {
    /**
     * 
     * @type {EmailOtpVerifyEmailPostRequest}
     * @memberof EmailOtpApiEmailOtpVerifyEmailPost
     */
    readonly emailOtpVerifyEmailPostRequest: EmailOtpVerifyEmailPostRequest
}

/**
 * Request parameters for forgetPasswordEmailOtpPost operation in EmailOtpApi.
 * @export
 * @interface EmailOtpApiForgetPasswordEmailOtpPostRequest
 */
export interface EmailOtpApiForgetPasswordEmailOtpPostRequest {
    /**
     * 
     * @type {ForgetPasswordEmailOtpPostRequest}
     * @memberof EmailOtpApiForgetPasswordEmailOtpPost
     */
    readonly forgetPasswordEmailOtpPostRequest: ForgetPasswordEmailOtpPostRequest
}

/**
 * Request parameters for signInEmailOtpPost operation in EmailOtpApi.
 * @export
 * @interface EmailOtpApiSignInEmailOtpPostRequest
 */
export interface EmailOtpApiSignInEmailOtpPostRequest {
    /**
     * 
     * @type {SignInEmailOtpPostRequest}
     * @memberof EmailOtpApiSignInEmailOtpPost
     */
    readonly signInEmailOtpPostRequest: SignInEmailOtpPostRequest
}

/**
 * EmailOtpApi - object-oriented interface
 * @export
 * @class EmailOtpApi
 * @extends {BaseAPI}
 */
export class EmailOtpApi extends BaseAPI {
    /**
     * Check if a verification OTP is valid
     * @param {EmailOtpApiEmailOtpCheckVerificationOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailOtpApi
     */
    public emailOtpCheckVerificationOtpPost(requestParameters: EmailOtpApiEmailOtpCheckVerificationOtpPostRequest, options?: AxiosRequestConfig) {
        return EmailOtpApiFp(this.configuration).emailOtpCheckVerificationOtpPost(requestParameters.emailOtpCheckVerificationOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset user password with OTP
     * @param {EmailOtpApiEmailOtpResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailOtpApi
     */
    public emailOtpResetPasswordPost(requestParameters: EmailOtpApiEmailOtpResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return EmailOtpApiFp(this.configuration).emailOtpResetPasswordPost(requestParameters.emailOtpResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send verification OTP
     * @param {EmailOtpApiEmailOtpSendVerificationOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailOtpApi
     */
    public emailOtpSendVerificationOtpPost(requestParameters: EmailOtpApiEmailOtpSendVerificationOtpPostRequest, options?: AxiosRequestConfig) {
        return EmailOtpApiFp(this.configuration).emailOtpSendVerificationOtpPost(requestParameters.emailOtpSendVerificationOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify email with OTP
     * @param {EmailOtpApiEmailOtpVerifyEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailOtpApi
     */
    public emailOtpVerifyEmailPost(requestParameters: EmailOtpApiEmailOtpVerifyEmailPostRequest, options?: AxiosRequestConfig) {
        return EmailOtpApiFp(this.configuration).emailOtpVerifyEmailPost(requestParameters.emailOtpVerifyEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a password reset OTP to the user
     * @param {EmailOtpApiForgetPasswordEmailOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailOtpApi
     */
    public forgetPasswordEmailOtpPost(requestParameters: EmailOtpApiForgetPasswordEmailOtpPostRequest, options?: AxiosRequestConfig) {
        return EmailOtpApiFp(this.configuration).forgetPasswordEmailOtpPost(requestParameters.forgetPasswordEmailOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign in with OTP
     * @param {EmailOtpApiSignInEmailOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailOtpApi
     */
    public signInEmailOtpPost(requestParameters: EmailOtpApiSignInEmailOtpPostRequest, options?: AxiosRequestConfig) {
        return EmailOtpApiFp(this.configuration).signInEmailOtpPost(requestParameters.signInEmailOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

