/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PhoneNumberForgetPasswordPost200Response } from '../models';
// @ts-ignore
import { PhoneNumberForgetPasswordPostRequest } from '../models';
// @ts-ignore
import { PhoneNumberRequestPasswordResetPostRequest } from '../models';
// @ts-ignore
import { PhoneNumberResetPasswordPost200Response } from '../models';
// @ts-ignore
import { PhoneNumberResetPasswordPostRequest } from '../models';
// @ts-ignore
import { PhoneNumberSendOtpPostRequest } from '../models';
// @ts-ignore
import { PhoneNumberVerifyPost200Response } from '../models';
// @ts-ignore
import { PhoneNumberVerifyPostRequest } from '../models';
// @ts-ignore
import { SignInPhoneNumberPost200Response } from '../models';
// @ts-ignore
import { SignInPhoneNumberPostRequest } from '../models';
// @ts-ignore
import { SocialSignIn400Response } from '../models';
// @ts-ignore
import { SocialSignIn403Response } from '../models';
/**
 * PhoneNumberApi - axios parameter creator
 * @export
 */
export const PhoneNumberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Request OTP for password reset via phone number
         * @param {PhoneNumberForgetPasswordPostRequest} phoneNumberForgetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberForgetPasswordPost: async (phoneNumberForgetPasswordPostRequest: PhoneNumberForgetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberForgetPasswordPostRequest' is not null or undefined
            assertParamExists('phoneNumberForgetPasswordPost', 'phoneNumberForgetPasswordPostRequest', phoneNumberForgetPasswordPostRequest)
            const localVarPath = `/phone-number/forget-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberForgetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request OTP for password reset via phone number
         * @param {PhoneNumberRequestPasswordResetPostRequest} phoneNumberRequestPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberRequestPasswordResetPost: async (phoneNumberRequestPasswordResetPostRequest: PhoneNumberRequestPasswordResetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberRequestPasswordResetPostRequest' is not null or undefined
            assertParamExists('phoneNumberRequestPasswordResetPost', 'phoneNumberRequestPasswordResetPostRequest', phoneNumberRequestPasswordResetPostRequest)
            const localVarPath = `/phone-number/request-password-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberRequestPasswordResetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password using phone number OTP
         * @param {PhoneNumberResetPasswordPostRequest} phoneNumberResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberResetPasswordPost: async (phoneNumberResetPasswordPostRequest: PhoneNumberResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberResetPasswordPostRequest' is not null or undefined
            assertParamExists('phoneNumberResetPasswordPost', 'phoneNumberResetPasswordPostRequest', phoneNumberResetPasswordPostRequest)
            const localVarPath = `/phone-number/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to send OTP to phone number
         * @param {PhoneNumberSendOtpPostRequest} phoneNumberSendOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberSendOtpPost: async (phoneNumberSendOtpPostRequest: PhoneNumberSendOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberSendOtpPostRequest' is not null or undefined
            assertParamExists('phoneNumberSendOtpPost', 'phoneNumberSendOtpPostRequest', phoneNumberSendOtpPostRequest)
            const localVarPath = `/phone-number/send-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberSendOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to verify phone number
         * @param {PhoneNumberVerifyPostRequest} phoneNumberVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberVerifyPost: async (phoneNumberVerifyPostRequest: PhoneNumberVerifyPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberVerifyPostRequest' is not null or undefined
            assertParamExists('phoneNumberVerifyPost', 'phoneNumberVerifyPostRequest', phoneNumberVerifyPostRequest)
            const localVarPath = `/phone-number/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to sign in with phone number
         * @param {SignInPhoneNumberPostRequest} signInPhoneNumberPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInPhoneNumberPost: async (signInPhoneNumberPostRequest: SignInPhoneNumberPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInPhoneNumberPostRequest' is not null or undefined
            assertParamExists('signInPhoneNumberPost', 'signInPhoneNumberPostRequest', signInPhoneNumberPostRequest)
            const localVarPath = `/sign-in/phone-number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInPhoneNumberPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneNumberApi - functional programming interface
 * @export
 */
export const PhoneNumberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneNumberApiAxiosParamCreator(configuration)
    return {
        /**
         * Request OTP for password reset via phone number
         * @param {PhoneNumberForgetPasswordPostRequest} phoneNumberForgetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberForgetPasswordPost(phoneNumberForgetPasswordPostRequest: PhoneNumberForgetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberForgetPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberForgetPasswordPost(phoneNumberForgetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request OTP for password reset via phone number
         * @param {PhoneNumberRequestPasswordResetPostRequest} phoneNumberRequestPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberRequestPasswordResetPost(phoneNumberRequestPasswordResetPostRequest: PhoneNumberRequestPasswordResetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberForgetPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberRequestPasswordResetPost(phoneNumberRequestPasswordResetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reset password using phone number OTP
         * @param {PhoneNumberResetPasswordPostRequest} phoneNumberResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberResetPasswordPost(phoneNumberResetPasswordPostRequest: PhoneNumberResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberResetPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberResetPasswordPost(phoneNumberResetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to send OTP to phone number
         * @param {PhoneNumberSendOtpPostRequest} phoneNumberSendOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberSendOtpPost(phoneNumberSendOtpPostRequest: PhoneNumberSendOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SocialSignIn403Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberSendOtpPost(phoneNumberSendOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to verify phone number
         * @param {PhoneNumberVerifyPostRequest} phoneNumberVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberVerifyPost(phoneNumberVerifyPostRequest: PhoneNumberVerifyPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberVerifyPost(phoneNumberVerifyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to sign in with phone number
         * @param {SignInPhoneNumberPostRequest} signInPhoneNumberPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInPhoneNumberPost(signInPhoneNumberPostRequest: SignInPhoneNumberPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInPhoneNumberPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInPhoneNumberPost(signInPhoneNumberPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhoneNumberApi - factory interface
 * @export
 */
export const PhoneNumberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneNumberApiFp(configuration)
    return {
        /**
         * Request OTP for password reset via phone number
         * @param {PhoneNumberApiPhoneNumberForgetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberForgetPasswordPost(requestParameters: PhoneNumberApiPhoneNumberForgetPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberForgetPasswordPost200Response> {
            return localVarFp.phoneNumberForgetPasswordPost(requestParameters.phoneNumberForgetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Request OTP for password reset via phone number
         * @param {PhoneNumberApiPhoneNumberRequestPasswordResetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberRequestPasswordResetPost(requestParameters: PhoneNumberApiPhoneNumberRequestPasswordResetPostRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberForgetPasswordPost200Response> {
            return localVarFp.phoneNumberRequestPasswordResetPost(requestParameters.phoneNumberRequestPasswordResetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset password using phone number OTP
         * @param {PhoneNumberApiPhoneNumberResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberResetPasswordPost(requestParameters: PhoneNumberApiPhoneNumberResetPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberResetPasswordPost200Response> {
            return localVarFp.phoneNumberResetPasswordPost(requestParameters.phoneNumberResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to send OTP to phone number
         * @param {PhoneNumberApiPhoneNumberSendOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberSendOtpPost(requestParameters: PhoneNumberApiPhoneNumberSendOtpPostRequest, options?: AxiosRequestConfig): AxiosPromise<SocialSignIn403Response> {
            return localVarFp.phoneNumberSendOtpPost(requestParameters.phoneNumberSendOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to verify phone number
         * @param {PhoneNumberApiPhoneNumberVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberVerifyPost(requestParameters: PhoneNumberApiPhoneNumberVerifyPostRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberVerifyPost200Response> {
            return localVarFp.phoneNumberVerifyPost(requestParameters.phoneNumberVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to sign in with phone number
         * @param {PhoneNumberApiSignInPhoneNumberPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInPhoneNumberPost(requestParameters: PhoneNumberApiSignInPhoneNumberPostRequest, options?: AxiosRequestConfig): AxiosPromise<SignInPhoneNumberPost200Response> {
            return localVarFp.signInPhoneNumberPost(requestParameters.signInPhoneNumberPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for phoneNumberForgetPasswordPost operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiPhoneNumberForgetPasswordPostRequest
 */
export interface PhoneNumberApiPhoneNumberForgetPasswordPostRequest {
    /**
     * 
     * @type {PhoneNumberForgetPasswordPostRequest}
     * @memberof PhoneNumberApiPhoneNumberForgetPasswordPost
     */
    readonly phoneNumberForgetPasswordPostRequest: PhoneNumberForgetPasswordPostRequest
}

/**
 * Request parameters for phoneNumberRequestPasswordResetPost operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiPhoneNumberRequestPasswordResetPostRequest
 */
export interface PhoneNumberApiPhoneNumberRequestPasswordResetPostRequest {
    /**
     * 
     * @type {PhoneNumberRequestPasswordResetPostRequest}
     * @memberof PhoneNumberApiPhoneNumberRequestPasswordResetPost
     */
    readonly phoneNumberRequestPasswordResetPostRequest: PhoneNumberRequestPasswordResetPostRequest
}

/**
 * Request parameters for phoneNumberResetPasswordPost operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiPhoneNumberResetPasswordPostRequest
 */
export interface PhoneNumberApiPhoneNumberResetPasswordPostRequest {
    /**
     * 
     * @type {PhoneNumberResetPasswordPostRequest}
     * @memberof PhoneNumberApiPhoneNumberResetPasswordPost
     */
    readonly phoneNumberResetPasswordPostRequest: PhoneNumberResetPasswordPostRequest
}

/**
 * Request parameters for phoneNumberSendOtpPost operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiPhoneNumberSendOtpPostRequest
 */
export interface PhoneNumberApiPhoneNumberSendOtpPostRequest {
    /**
     * 
     * @type {PhoneNumberSendOtpPostRequest}
     * @memberof PhoneNumberApiPhoneNumberSendOtpPost
     */
    readonly phoneNumberSendOtpPostRequest: PhoneNumberSendOtpPostRequest
}

/**
 * Request parameters for phoneNumberVerifyPost operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiPhoneNumberVerifyPostRequest
 */
export interface PhoneNumberApiPhoneNumberVerifyPostRequest {
    /**
     * 
     * @type {PhoneNumberVerifyPostRequest}
     * @memberof PhoneNumberApiPhoneNumberVerifyPost
     */
    readonly phoneNumberVerifyPostRequest: PhoneNumberVerifyPostRequest
}

/**
 * Request parameters for signInPhoneNumberPost operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiSignInPhoneNumberPostRequest
 */
export interface PhoneNumberApiSignInPhoneNumberPostRequest {
    /**
     * 
     * @type {SignInPhoneNumberPostRequest}
     * @memberof PhoneNumberApiSignInPhoneNumberPost
     */
    readonly signInPhoneNumberPostRequest: SignInPhoneNumberPostRequest
}

/**
 * PhoneNumberApi - object-oriented interface
 * @export
 * @class PhoneNumberApi
 * @extends {BaseAPI}
 */
export class PhoneNumberApi extends BaseAPI {
    /**
     * Request OTP for password reset via phone number
     * @param {PhoneNumberApiPhoneNumberForgetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApi
     */
    public phoneNumberForgetPasswordPost(requestParameters: PhoneNumberApiPhoneNumberForgetPasswordPostRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).phoneNumberForgetPasswordPost(requestParameters.phoneNumberForgetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request OTP for password reset via phone number
     * @param {PhoneNumberApiPhoneNumberRequestPasswordResetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApi
     */
    public phoneNumberRequestPasswordResetPost(requestParameters: PhoneNumberApiPhoneNumberRequestPasswordResetPostRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).phoneNumberRequestPasswordResetPost(requestParameters.phoneNumberRequestPasswordResetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset password using phone number OTP
     * @param {PhoneNumberApiPhoneNumberResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApi
     */
    public phoneNumberResetPasswordPost(requestParameters: PhoneNumberApiPhoneNumberResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).phoneNumberResetPasswordPost(requestParameters.phoneNumberResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to send OTP to phone number
     * @param {PhoneNumberApiPhoneNumberSendOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApi
     */
    public phoneNumberSendOtpPost(requestParameters: PhoneNumberApiPhoneNumberSendOtpPostRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).phoneNumberSendOtpPost(requestParameters.phoneNumberSendOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to verify phone number
     * @param {PhoneNumberApiPhoneNumberVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApi
     */
    public phoneNumberVerifyPost(requestParameters: PhoneNumberApiPhoneNumberVerifyPostRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).phoneNumberVerifyPost(requestParameters.phoneNumberVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to sign in with phone number
     * @param {PhoneNumberApiSignInPhoneNumberPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApi
     */
    public signInPhoneNumberPost(requestParameters: PhoneNumberApiSignInPhoneNumberPostRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).signInPhoneNumberPost(requestParameters.signInPhoneNumberPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

